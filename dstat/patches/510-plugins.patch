--- dstat-0.7.2/plugins/dstat_innodb_ops.py.orig	2009-11-26 05:13:26.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_innodb_ops.py	2015-12-11 11:54:54.351863398 +0300
@@ -13,9 +13,9 @@
         self.scale = 1000
 
     def check(self): 
-        if os.access('/usr/bin/mysql', os.X_OK):
+        if os.access('/opt/bin/mysql', os.X_OK):
             try:
-                self.stdin, self.stdout, self.stderr = dpopen('/usr/bin/mysql -n %s' % mysql_options)
+                self.stdin, self.stdout, self.stderr = dpopen('/opt/bin/mysql -n %s' % mysql_options)
             except IOError:
                 raise Exception, 'Cannot interface with MySQL binary'
             return True
--- dstat-0.7.2/plugins/dstat_gpfs.py.orig	2010-05-30 13:19:42.000000000 +0400
+++ dstat-0.7.2/plugins/dstat_gpfs.py	2015-12-11 11:51:52.907860378 +0300
@@ -11,9 +11,9 @@
         self.vars = ('_br_', '_bw_')
 
     def check(self):
-        if os.access('/usr/lpp/mmfs/bin/mmpmon', os.X_OK):
+        if os.access('/opt/lpp/mmfs/bin/mmpmon', os.X_OK):
             try:
-                self.stdin, self.stdout, self.stderr = dpopen('/usr/lpp/mmfs/bin/mmpmon -p -s')
+                self.stdin, self.stdout, self.stderr = dpopen('/opt/lpp/mmfs/bin/mmpmon -p -s')
                 self.stdin.write('reset\n')
                 readpipe(self.stdout)
             except IOError:
--- dstat-0.7.2/plugins/dstat_mysql_keys.py.orig	2009-11-26 05:14:18.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_mysql_keys.py	2015-12-11 11:55:52.711864369 +0300
@@ -11,10 +11,10 @@
         self.scale = 1000
 
     def check(self): 
-        if not os.access('/usr/bin/mysql', os.X_OK):
+        if not os.access('/opt/bin/mysql', os.X_OK):
             raise Exception, 'Needs MySQL binary'
         try:
-            self.stdin, self.stdout, self.stderr = dpopen('/usr/bin/mysql -n %s' % mysql_options)
+            self.stdin, self.stdout, self.stderr = dpopen('/opt/bin/mysql -n %s' % mysql_options)
         except IOError:
             raise Exception, 'Cannot interface with MySQL binary'
 
--- dstat-0.7.2/plugins/dstat_innodb_buffer.py.orig	2009-11-26 05:13:13.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_innodb_buffer.py	2015-12-11 11:54:07.823862623 +0300
@@ -13,10 +13,10 @@
         self.scale = 1000
 
     def check(self): 
-        if not os.access('/usr/bin/mysql', os.X_OK):
+        if not os.access('/opt/bin/mysql', os.X_OK):
             raise Exception, 'Needs MySQL binary'
         try:
-            self.stdin, self.stdout, self.stderr = dpopen('/usr/bin/mysql -n %s' % mysql_options)
+            self.stdin, self.stdout, self.stderr = dpopen('/opt/bin/mysql -n %s' % mysql_options)
         except IOError, e:
             raise Exception, 'Cannot interface with MySQL binary (%s)' % e
 
--- dstat-0.7.2/plugins/dstat_gpfs_ops.py.orig	2009-11-26 05:12:56.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_gpfs_ops.py	2015-12-11 11:52:10.687860674 +0300
@@ -14,9 +14,9 @@
         self.scale = 1000
 
     def check(self): 
-        if os.access('/usr/lpp/mmfs/bin/mmpmon', os.X_OK):
+        if os.access('/opt/lpp/mmfs/bin/mmpmon', os.X_OK):
             try:
-                self.stdin, self.stdout, self.stderr = dpopen('/usr/lpp/mmfs/bin/mmpmon -p -s')
+                self.stdin, self.stdout, self.stderr = dpopen('/opt/lpp/mmfs/bin/mmpmon -p -s')
                 self.stdin.write('reset\n')
                 readpipe(self.stdout)
             except IOError:
--- dstat-0.7.2/plugins/dstat_squid.py.orig	2010-06-14 11:03:22.000000000 +0400
+++ dstat-0.7.2/plugins/dstat_squid.py	2015-12-11 11:57:38.155866124 +0300
@@ -30,14 +30,14 @@
             'objsz')
 
     def check(self):
-        if not os.access('/usr/sbin/squidclient', os.X_OK):
+        if not os.access('/opt/sbin/squidclient', os.X_OK):
             raise Exception, 'Needs squidclient binary'
-        cmd_test('/usr/sbin/squidclient %s mgr:info' % squidclient_options)
+        cmd_test('/opt/sbin/squidclient %s mgr:info' % squidclient_options)
         return True
  
     def extract(self):
         try:
-            for l in cmd_splitlines('/usr/sbin/squidclient %s mgr:info' % squidclient_options, ':'):
+            for l in cmd_splitlines('/opt/sbin/squidclient %s mgr:info' % squidclient_options, ':'):
                 if l[0].strip() in self.vars:
                     self.val[l[0].strip()] = l[1].strip()
                     break
--- dstat-0.7.2/plugins/dstat_sendmail.py.orig	2009-11-26 05:17:02.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_sendmail.py	2015-12-11 11:57:14.379865728 +0300
@@ -11,10 +11,10 @@
         self.scale = 100
 
     def check(self):
-        if not os.access('/var/spool/mqueue', os.R_OK):
+        if not os.access('/opt/var/spool/mqueue', os.R_OK):
             raise Exception, 'Cannot access sendmail queue'
 
     def extract(self):
-        self.val['queue'] = len(glob.glob('/var/spool/mqueue/qf*'))
+        self.val['queue'] = len(glob.glob('/opt/var/spool/mqueue/qf*'))
 
 # vim:ts=4:sw=4:et
--- dstat-0.7.2/plugins/dstat_mysql_io.py.orig	2010-05-22 01:48:01.000000000 +0400
+++ dstat-0.7.2/plugins/dstat_mysql_io.py	2015-12-11 11:55:38.103864126 +0300
@@ -8,10 +8,10 @@
         self.vars = ('Bytes_received', 'Bytes_sent')
 
     def check(self): 
-        if not os.access('/usr/bin/mysql', os.X_OK):
+        if not os.access('/opt/bin/mysql', os.X_OK):
             raise Exception, 'Needs MySQL binary'
         try:
-            self.stdin, self.stdout, self.stderr = dpopen('/usr/bin/mysql -n %s' % mysql_options)
+            self.stdin, self.stdout, self.stderr = dpopen('/opt/bin/mysql -n %s' % mysql_options)
         except IOError:
             raise Exception, 'Cannot interface with MySQL binary'
 
--- dstat-0.7.2/plugins/dstat_qmail.py.orig	2009-11-27 05:24:43.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_qmail.py	2015-12-11 11:40:44.839849258 +0300
@@ -14,11 +14,11 @@
 
     def check(self):
         for item in self.vars:
-            if not os.access('/var/qmail/queue/'+item, os.R_OK):
+            if not os.access('/opt/var/qmail/queue/'+item, os.R_OK):
                 raise Exception, 'Cannot access qmail queues'
 
     def extract(self):
         for item in self.vars:
-            self.val[item] = len(glob.glob('/var/qmail/queue/'+item+'/*/*'))
+            self.val[item] = len(glob.glob('/opt/var/qmail/queue/'+item+'/*/*'))
 
 # vim:ts=4:sw=4:et
--- dstat-0.7.2/plugins/dstat_innodb_io.py.orig	2009-11-26 05:13:19.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_innodb_io.py	2015-12-11 11:54:29.175862979 +0300
@@ -13,9 +13,9 @@
         self.scale = 1000
 
     def check(self): 
-        if os.access('/usr/bin/mysql', os.X_OK):
+        if os.access('/opt/bin/mysql', os.X_OK):
             try:
-                self.stdin, self.stdout, self.stderr = dpopen('/usr/bin/mysql -n %s' % mysql_options)
+                self.stdin, self.stdout, self.stderr = dpopen('/opt/bin/mysql -n %s' % mysql_options)
             except IOError:
                 raise Exception, 'Cannot interface with MySQL binary'
             return True
--- dstat-0.7.2/plugins/dstat_postfix.py.orig	2009-11-26 05:15:33.000000000 +0300
+++ dstat-0.7.2/plugins/dstat_postfix.py	2015-12-11 11:40:16.543848787 +0300
@@ -10,11 +10,11 @@
         self.scale = 100
 
     def check(self):
-        if not os.access('/var/spool/postfix/active', os.R_OK):
+        if not os.access('/opt/var/spool/postfix/active', os.R_OK):
             raise Exception, 'Cannot access postfix queues'
 
     def extract(self):
         for item in self.vars:
-            self.val[item] = len(glob.glob('/var/spool/postfix/'+item+'/*/*'))
+            self.val[item] = len(glob.glob('/opt/var/spool/postfix/'+item+'/*/*'))
 
 # vim:ts=4:sw=4:et
